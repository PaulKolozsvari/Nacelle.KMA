using System;using System.Collections.Generic;using System.Linq;using MvvmCross.Forms.Presenters.Attributes;using Nacelle.KMA.Core.Models.Entites;using Nacelle.KMA.Core.Models.Items;using Nacelle.KMA.Core.ViewModels;using Nacelle.KMA.UI.Views;using Rg.Plugins.Popup.Services;using Xamarin.Forms;namespace Nacelle.KMA.UI.Pages{    [MvxContentPagePresentation(WrapInNavigationPage = true)]    public partial class UpdateTravellerDetailsPage : BaseContentPage<UpdateTravellerDetailsViewModel>    {        private object _selected;        public UpdateTravellerDetailsPage()        {            InitializeComponent();            NavigationPage.SetBackButtonTitle(this, "");            var currentYear = DateTime.Now.Year;            _monthDays = Enumerable.Range(1, 31).ToList();            _yearMonths = Enumerable.Range(1, 12).ToList();            _birthYears = Enumerable.Range(1930, currentYear - 1930).OrderByDescending(x => x).ToList();            _passportYears = Enumerable.Range(currentYear, 15).ToList();        }


        // TODO :: see if there is a way to DRY up the below logic

        #region EMERGENCY CONTACT
        private async void EmergencyContactCountrySelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var countrySelector = new CountrySelectorPopup(ViewModel.CountryDialCodes);            countrySelector.CountrySelected += CountrySelector_EmergencyContactCountrySelected;            await PopupNavigation.Instance.PushAsync(countrySelector);        }        private void CountrySelector_EmergencyContactCountrySelected(object sender, object e)        {            if (sender is CountrySelectorPopup countrySelector)            {                countrySelector.CountrySelected -= CountrySelector_EmergencyContactCountrySelected;                if (e is CountryEntity countryEntity)                {                    if (_selected is EmergencyContact emergencyContact)                    {                        emergencyContact.Country = countryEntity.Name;                        emergencyContact.DialingCode = countryEntity.Code;                        emergencyContact.CountryCode = ViewModel.CountryISOCodes.FirstOrDefault(x => x.Name == countryEntity.Name)?.Code;                    }                }            }        }

        private async void EmergencyContactCodeSelectorTapped(object sender, EventArgs e)
        {
            if (e is TappedEventArgs tappedEventArgs)
            {
                _selected = tappedEventArgs.Parameter;
            }

            var countrySelector = new CountrySelectorPopup(ViewModel.CountryDialCodes);
            countrySelector.CountrySelected += CountrySelector_EmergencyCodeCountrySelected;

            await PopupNavigation.Instance.PushAsync(countrySelector);
        }

        private void CountrySelector_EmergencyCodeCountrySelected(object sender, object e)
        {
            if (sender is CountrySelectorPopup countrySelector)
            {
                countrySelector.CountrySelected -= CountrySelector_EmergencyCodeCountrySelected;

                if (e is CountryEntity countryEntity)
                {
                    if (_selected is EmergencyContact emergencyContact)
                    {
                        emergencyContact.CountryCode = countryEntity.Code;
                    }
                }
            }
        }



        #endregion
        #region Passport
        private async void PassportNationalityCountrySelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var countrySelector = new CountrySelectorPopup(ViewModel.CountryISOCodes);            countrySelector.CountrySelected += CountrySelector_PassportNationalityCountrySelected;            await PopupNavigation.Instance.PushAsync(countrySelector);        }        private void CountrySelector_PassportNationalityCountrySelected(object sender, object e)        {            if (sender is CountrySelectorPopup countrySelector)            {                countrySelector.CountrySelected -= CountrySelector_PassportNationalityCountrySelected;                if (e is CountryEntity countryEntity)                {                    if (_selected is PassportDetails passportDetails)                    {                        passportDetails.Nationality = countryEntity.Name;                        passportDetails.NationalityCode = countryEntity.Code;                    }                }            }        }        private async void PassportIssuingCountrySelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var countrySelector = new CountrySelectorPopup(ViewModel.CountryISOCodes);            countrySelector.CountrySelected += CountrySelector_PassportIssuingCountrySelected;            await PopupNavigation.Instance.PushAsync(countrySelector);        }        private void CountrySelector_PassportIssuingCountrySelected(object sender, object e)        {            if (sender is CountrySelectorPopup countrySelector)            {                countrySelector.CountrySelected -= CountrySelector_PassportIssuingCountrySelected;                if (e is CountryEntity countryEntity)                {                    if (_selected is PassportDetails passportDetails)                    {                        passportDetails.IssuingCountry = countryEntity.Name;                        passportDetails.IssuingCountryCode = countryEntity.Code;                    }                }            }        }        private async void PassportBirthDayNumberSelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var numberSelector = new NumberSelectorPopUp(_monthDays);            numberSelector.NumberSelected += NumberSelector_PassportBirthDaySelected;            await PopupNavigation.Instance.PushAsync(numberSelector);        }        private void NumberSelector_PassportBirthDaySelected(object sender, int e)        {            if (sender is NumberSelectorPopUp numberSelector)            {                numberSelector.NumberSelected -= NumberSelector_PassportBirthDaySelected;                if (_selected is PassportDetails passportDetails)                {                    passportDetails.BirthDay = e;                }            }        }        private async void PassportBirthMonthNumberSelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var numberSelector = new NumberSelectorPopUp(_yearMonths);            numberSelector.NumberSelected += NumberSelector_PassportBirthMonthSelected;            await PopupNavigation.Instance.PushAsync(numberSelector);        }        private void NumberSelector_PassportBirthMonthSelected(object sender, int e)        {            if (sender is NumberSelectorPopUp numberSelector)            {                numberSelector.NumberSelected -= NumberSelector_PassportBirthMonthSelected;                if (_selected is PassportDetails passportDetails)                {                    passportDetails.BirthMonth = e;                }            }        }        private async void PassportBirthYearNumberSelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var numberSelector = new NumberSelectorPopUp(_birthYears);            numberSelector.NumberSelected += NumberSelector_PassportBirthYearSelected;            await PopupNavigation.Instance.PushAsync(numberSelector);        }        private void NumberSelector_PassportBirthYearSelected(object sender, int e)        {            if (sender is NumberSelectorPopUp numberSelector)            {                numberSelector.NumberSelected -= NumberSelector_PassportBirthYearSelected;                if (_selected is PassportDetails passportDetails)                {                    passportDetails.BirthYear = e;                }            }        }        private async void PassportExpiryDayNumberSelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var numberSelector = new NumberSelectorPopUp(_monthDays);            numberSelector.NumberSelected += NumberSelector_PassportExpiryDaySelected;            await PopupNavigation.Instance.PushAsync(numberSelector);        }        private void NumberSelector_PassportExpiryDaySelected(object sender, int e)        {            if (sender is NumberSelectorPopUp numberSelector)            {                numberSelector.NumberSelected -= NumberSelector_PassportExpiryDaySelected;                if (_selected is PassportDetails passportDetails)                {                    passportDetails.ExpirationDay = e;                }            }        }        private async void PassportExpiryMonthNumberSelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var numberSelector = new NumberSelectorPopUp(_yearMonths);            numberSelector.NumberSelected += NumberSelector_PassportExpiryMonthSelected;            await PopupNavigation.Instance.PushAsync(numberSelector);        }        private void NumberSelector_PassportExpiryMonthSelected(object sender, int e)        {            if (sender is NumberSelectorPopUp numberSelector)            {                numberSelector.NumberSelected -= NumberSelector_PassportExpiryMonthSelected;                if (_selected is PassportDetails passportDetails)                {                    passportDetails.ExpirationMonth = e;                }            }        }        private async void PassportExpiryYearNumberSelectorTapped(object sender, EventArgs e)        {            if (e is TappedEventArgs tappedEventArgs)            {                _selected = tappedEventArgs.Parameter;            }            var numberSelector = new NumberSelectorPopUp(_passportYears);            numberSelector.NumberSelected += NumberSelector_PassportExpiryYearSelected;            await PopupNavigation.Instance.PushAsync(numberSelector);        }        private void NumberSelector_PassportExpiryYearSelected(object sender, int e)        {            if (sender is NumberSelectorPopUp numberSelector)            {                numberSelector.NumberSelected -= NumberSelector_PassportExpiryYearSelected;                if (_selected is PassportDetails passportDetails)                {                    passportDetails.ExpirationYear = e;                }            }        }


        #endregion
        private readonly List<int> _monthDays;        private readonly List<int> _yearMonths;        private readonly List<int> _birthYears;        private readonly List<int> _passportYears;    }}